<?php

declare(strict_types=1);

/*
 * This file is part of the TYPO3 Upgrade Analyzer.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License or any later version.
 */

namespace CPSIT\UpgradeAnalyzer\Infrastructure\Analyzer\Fractor;

use CPSIT\UpgradeAnalyzer\Domain\Entity\Extension;
use CPSIT\UpgradeAnalyzer\Domain\ValueObject\AnalysisContext;
use CPSIT\UpgradeAnalyzer\Domain\ValueObject\Version;

/**
 * Generates Fractor configuration files for analysis.
 */
class FractorConfigGenerator
{
    public function __construct(
        private readonly string $tempDirectory,
    ) {
    }

    public function generateConfig(Extension $extension, AnalysisContext $context, string $extensionPath = ''): string
    {
        $configContent = $this->buildConfigContent($extension, $context, $extensionPath);

        $configPath = $this->tempDirectory . '/fractor_' . $extension->getKey() . '_' . uniqid('', true) . '.php';

        // Ensure temp directory exists
        if (
            !is_dir($this->tempDirectory)
            && !mkdir($concurrentDirectory = $this->tempDirectory, 0o755, true)
            && !is_dir($concurrentDirectory)) {
            throw new \RuntimeException(\sprintf('Directory "%s" was not created', $concurrentDirectory));
        }

        file_put_contents($configPath, $configContent);

        return $configPath;
    }

    private function buildConfigContent(Extension $extension, AnalysisContext $context, string $extensionPath = ''): string
    {
        $targetVersion = $context->getTargetVersion();
        $typo3Set = $this->getTypo3LevelSet($targetVersion);
        $optionsConfig = $this->getTypoScriptOptions();

        return <<<PHP
            <?php

            declare(strict_types=1);

            /**
             * Fractor configuration for analyzing extension: {$extension->getKey()}
             * Target TYPO3 version: {$targetVersion->toString()}
             * Generated by TYPO3 Upgrade Analyzer
             */

            use a9f\Fractor\Configuration\FractorConfiguration;
            use a9f\FractorTypoScript\Configuration\TypoScriptProcessorOption;
            use a9f\Typo3Fractor\Set\Typo3LevelSetList;
            use Helmich\TypoScriptParser\Parser\Printer\PrettyPrinterConfiguration;

            return FractorConfiguration::configure()
                ->withPaths([
                    '{$extensionPath}',
                ])
                ->withSets([
                    {$typo3Set},
                ])
                ->withSkip([
                    // Skip test files and vendor directories
                    '*/Tests/*',
                    '*/tests/*',
                    '*/vendor/*',
                    '*/node_modules/*',
                    // Skip build and cache directories
                    '*/Resources/Public/*',
                    '*/.Build/*',
                    '*/var/*',
                    // Skip documentation
                    '*/Documentation/*',
                ])
                ->withOptions([
                    {$optionsConfig}
                ]);
            PHP;
    }

    private function getTypo3LevelSet(Version $targetVersion): string
    {
        return match ($targetVersion->getMajor()) {
            14 => 'Typo3LevelSetList::UP_TO_TYPO3_14',
            13 => 'Typo3LevelSetList::UP_TO_TYPO3_13',
            12 => 'Typo3LevelSetList::UP_TO_TYPO3_12',
            11 => 'Typo3LevelSetList::UP_TO_TYPO3_11',
            10 => 'Typo3LevelSetList::UP_TO_TYPO3_10',
            default => 'Typo3LevelSetList::UP_TO_TYPO3_12', // Default to TYPO3 12 for unknown versions
        };
    }

    private function getTypoScriptOptions(): string
    {
        return <<<'OPTIONS'
            // TypoScript formatting options
                    TypoScriptProcessorOption::INDENT_SIZE => 2,
                    TypoScriptProcessorOption::INDENT_CHARACTER => PrettyPrinterConfiguration::INDENTATION_STYLE_SPACES,
                    TypoScriptProcessorOption::ADD_CLOSING_GLOBAL => true,
                    TypoScriptProcessorOption::INCLUDE_EMPTY_LINE_BREAKS => true,
                    TypoScriptProcessorOption::INDENT_CONDITIONS => true
            OPTIONS;
    }
}
